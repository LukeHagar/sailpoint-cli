// Code generated by MockGen. DO NOT EDIT.
// Source: internal/terminal/terminal.go

// Package mocks is a generated GoMock package.
package mocks

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockTerm is a mock of Term interface.
type MockTerm struct {
	ctrl     *gomock.Controller
	recorder *MockTermMockRecorder
}

// MockTermMockRecorder is the mock recorder for MockTerm.
type MockTermMockRecorder struct {
	mock *MockTerm
}

// NewMockTerm creates a new mock instance.
func NewMockTerm(ctrl *gomock.Controller) *MockTerm {
	mock := &MockTerm{ctrl: ctrl}
	mock.recorder = &MockTermMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockTerm) EXPECT() *MockTermMockRecorder {
	return m.recorder
}

// PromptPassword mocks base method.
func (m *MockTerm) PromptPassword(promptMsg string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PromptPassword", promptMsg)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// PromptPassword indicates an expected call of PromptPassword.
func (mr *MockTermMockRecorder) PromptPassword(promptMsg interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PromptPassword", reflect.TypeOf((*MockTerm)(nil).PromptPassword), promptMsg)
}
